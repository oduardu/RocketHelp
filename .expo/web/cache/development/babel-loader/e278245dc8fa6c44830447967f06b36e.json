{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"tittle\", \"isActive\", \"type\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { Text, Button, useTheme } from 'native-base';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function Filter(_ref) {\n  var tittle = _ref.tittle,\n      _ref$isActive = _ref.isActive,\n      isActive = _ref$isActive === void 0 ? false : _ref$isActive,\n      type = _ref.type,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var colorType = type === 'open' ? colors.secondary[700] : colors.green[300];\n  return _jsx(Button, _objectSpread(_objectSpread({\n    variant: \"outline\",\n    borderWidth: isActive ? 1 : 0,\n    borderColor: colorType,\n    bgColor: \"gray.600\",\n    flex: 1,\n    size: \"sm\"\n  }, rest), {}, {\n    children: _jsx(Text, {\n      color: isActive ? colorType : 'gray.200',\n      fontSize: \"xs\",\n      fontFamily: \"body\",\n      textTransform: \"uppercase\",\n      children: tittle\n    })\n  }));\n}","map":{"version":3,"names":["Text","Button","useTheme","Filter","tittle","isActive","type","rest","colors","colorType","secondary","green"],"sources":["D:/dev/machinehelp/source/components/Filter.tsx"],"sourcesContent":["import { Text, Button, IButtonProps, useTheme } from 'native-base';\r\n\r\ntype Props = IButtonProps & {\r\n    tittle: string,\r\n    isActive?: boolean,\r\n    type: 'open' | 'closed',\r\n}\r\n\r\nexport function Filter({\r\n    tittle,\r\n    isActive = false,\r\n    type,\r\n    ...rest\r\n}: Props) {\r\n\r\n    const { colors } = useTheme();\r\n    const colorType = type === 'open' ? colors.secondary[700] : colors.green[300];\r\n  return (\r\n    <Button\r\n        variant='outline'\r\n        borderWidth={isActive ? 1 : 0}\r\n        borderColor={colorType}\r\n        bgColor='gray.600'\r\n        flex={1}\r\n        size='sm'\r\n        {...rest}\r\n    >\r\n        <Text\r\n        color={isActive ? colorType : 'gray.200'}\r\n        fontSize='xs'\r\n        fontFamily='body'\r\n        textTransform='uppercase'\r\n        >\r\n        {tittle}\r\n        </Text>\r\n    </Button>\r\n  );\r\n}"],"mappings":";;;;;;;;AAAA,SAASA,IAAT,EAAeC,MAAf,EAAqCC,QAArC,QAAqD,aAArD;;AAQA,OAAO,SAASC,MAAT,OAKG;EAAA,IAJNC,MAIM,QAJNA,MAIM;EAAA,yBAHNC,QAGM;EAAA,IAHNA,QAGM,8BAHK,KAGL;EAAA,IAFNC,IAEM,QAFNA,IAEM;EAAA,IADHC,IACG;;EAEN,gBAAmBL,QAAQ,EAA3B;EAAA,IAAQM,MAAR,aAAQA,MAAR;;EACA,IAAMC,SAAS,GAAGH,IAAI,KAAK,MAAT,GAAkBE,MAAM,CAACE,SAAP,CAAiB,GAAjB,CAAlB,GAA0CF,MAAM,CAACG,KAAP,CAAa,GAAb,CAA5D;EACF,OACE,KAAC,MAAD;IACI,OAAO,EAAC,SADZ;IAEI,WAAW,EAAEN,QAAQ,GAAG,CAAH,GAAO,CAFhC;IAGI,WAAW,EAAEI,SAHjB;IAII,OAAO,EAAC,UAJZ;IAKI,IAAI,EAAE,CALV;IAMI,IAAI,EAAC;EANT,GAOQF,IAPR;IAAA,UASI,KAAC,IAAD;MACA,KAAK,EAAEF,QAAQ,GAAGI,SAAH,GAAe,UAD9B;MAEA,QAAQ,EAAC,IAFT;MAGA,UAAU,EAAC,MAHX;MAIA,aAAa,EAAC,WAJd;MAAA,UAMCL;IAND;EATJ,GADF;AAoBD"},"metadata":{},"sourceType":"module"}